{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\nconst emitter = new EventEmitter(NotificationsEmitterModule);\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n    const mappedResponse = _objectSpread({}, response);\n    try {\n      const dataString = mappedResponse?.notification?.request?.content['dataString'];\n      if (typeof dataString === 'string') {\n        mappedResponse.notification.request.content.data = JSON.parse(dataString);\n        delete mappedResponse.notification.request.content.dataString;\n      }\n    } catch (e) {\n      console.log(`Error in response: ${e}`);\n    }\n    console.log(`response received: ${JSON.stringify(mappedResponse, null, 2)}`);\n    listener(mappedResponse);\n  });\n}\nexport function removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport async function getLastNotificationResponseAsync() {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}","map":{"version":3,"names":["EventEmitter","UnavailabilityError","NotificationsEmitterModule","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","addNotificationsDroppedListener","addNotificationResponseReceivedListener","response","mappedResponse","_objectSpread","dataString","notification","request","content","data","JSON","parse","e","console","log","stringify","removeNotificationSubscription","subscription","removeSubscription","getLastNotificationResponseAsync"],"sources":["C:\\Users\\eusou\\Desktop\\DVGC Mobile\\Front End\\node_modules\\expo-notifications\\src\\NotificationsEmitter.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\n// @docsMissing\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\n/**\n * Listeners registered by this method will be called whenever a notification is received while the app is running.\n * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @example Registering a notification listener using a React hook:\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n *       console.log(notification);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n * @param listener A callback function.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @header listen\n */\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @example Register a notification responder listener:\n * ```jsx\n * import React from 'react';\n * import { Linking } from 'react-native';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function Container() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n *       const url = response.notification.request.content.data.url;\n *       Linking.openURL(url);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    (response: NotificationResponse) => {\n      const mappedResponse: NotificationResponse & {\n        notification: { request: { content: { dataString?: string } } };\n      } = { ...response };\n      try {\n        const dataString = mappedResponse?.notification?.request?.content['dataString'];\n        if (typeof dataString === 'string') {\n          mappedResponse.notification.request.content.data = JSON.parse(dataString);\n          delete mappedResponse.notification.request.content.dataString;\n        }\n      } catch (e: any) {\n        console.log(`Error in response: ${e}`);\n      }\n      console.log(`response received: ${JSON.stringify(mappedResponse, null, 2)}`);\n      listener(mappedResponse);\n    }\n  );\n}\n\n/**\n * Removes a notification subscription returned by an `addNotificationListener` call.\n * @param subscription A subscription returned by `addNotificationListener` method.\n * @header listen\n */\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n// @docsMissing\n/**\n * @header listen\n */\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"mappings":";;;AAAA,SAASA,YAAY,EAAgBC,mBAAmB,QAAQ,mBAAmB;AAGnF,OAAOC,0BAA0B,MAAM,8BAA8B;AAGrE,MAAMC,OAAO,GAAG,IAAIH,YAAY,CAACE,0BAA0B,CAAC;AAE5D,MAAME,+BAA+B,GAAG,0BAA0B;AAClE,MAAMC,6BAA6B,GAAG,wBAAwB;AAC9D,MAAMC,uCAAuC,GAAG,kCAAkC;AAGlF,OAAO,MAAMC,yBAAyB,GAAG,4CAA4C;AA0BrF,OAAM,SAAUC,+BAA+BA,CAC7CC,QAAuC;EAEvC,OAAON,OAAO,CAACO,WAAW,CAAeN,+BAA+B,EAAEK,QAAQ,CAAC;AACrF;AAUA,OAAM,SAAUE,+BAA+BA,CAACF,QAAoB;EAClE,OAAON,OAAO,CAACO,WAAW,CAAOL,6BAA6B,EAAEI,QAAQ,CAAC;AAC3E;AA4BA,OAAM,SAAUG,uCAAuCA,CACrDH,QAA+C;EAE/C,OAAON,OAAO,CAACO,WAAW,CACxBJ,uCAAuC,EACtCO,QAA8B,IAAI;IACjC,MAAMC,cAAc,GAAAC,aAAA,KAEXF,QAAQ,CAAE;IACnB,IAAI;MACF,MAAMG,UAAU,GAAGF,cAAc,EAAEG,YAAY,EAAEC,OAAO,EAAEC,OAAO,CAAC,YAAY,CAAC;MAC/E,IAAI,OAAOH,UAAU,KAAK,QAAQ,EAAE;QAClCF,cAAc,CAACG,YAAY,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;QACzE,OAAOF,cAAc,CAACG,YAAY,CAACC,OAAO,CAACC,OAAO,CAACH,UAAU;;KAEhE,CAAC,OAAOO,CAAM,EAAE;MACfC,OAAO,CAACC,GAAG,CAAC,sBAAsBF,CAAC,EAAE,CAAC;;IAExCC,OAAO,CAACC,GAAG,CAAC,sBAAsBJ,IAAI,CAACK,SAAS,CAACZ,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IAC5EL,QAAQ,CAACK,cAAc,CAAC;EAC1B,CAAC,CACF;AACH;AAOA,OAAM,SAAUa,8BAA8BA,CAACC,YAA0B;EACvEzB,OAAO,CAAC0B,kBAAkB,CAACD,YAAY,CAAC;AAC1C;AAMA,OAAO,eAAeE,gCAAgCA,CAAA;EACpD,IAAI,CAAC5B,0BAA0B,CAAC4B,gCAAgC,EAAE;IAChE,MAAM,IAAI7B,mBAAmB,CAAC,mBAAmB,EAAE,kCAAkC,CAAC;;EAExF,OAAO,MAAMC,0BAA0B,CAAC4B,gCAAgC,EAAE;AAC5E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}