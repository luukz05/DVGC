{"ast":null,"code":"import { useEffect, useLayoutEffect, useState } from 'react';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState(undefined);\n  useLayoutEffect(() => {\n    const subscription = addNotificationResponseReceivedListener(response => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n  useEffect(() => {\n    NotificationsEmitterModule.getLastNotificationResponseAsync?.().then(response => {\n      setLastNotificationResponse(currentResponse => currentResponse ?? response);\n    });\n  }, []);\n  return lastNotificationResponse;\n}","map":{"version":3,"names":["useEffect","useLayoutEffect","useState","addNotificationResponseReceivedListener","NotificationsEmitterModule","useLastNotificationResponse","lastNotificationResponse","setLastNotificationResponse","undefined","subscription","response","remove","getLastNotificationResponseAsync","then","currentResponse"],"sources":["C:\\Users\\eusou\\Desktop\\DVGC Mobile\\Front End\\node_modules\\expo-notifications\\src\\useLastNotificationResponse.ts"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n/**\n * A React hook always returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example\n * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(undefined);\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    const subscription = addNotificationResponseReceivedListener((response) => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  // On each mount of this hook we fetch last notification response\n  // from the native module which is an \"always active listener\"\n  // and always returns the most recent response.\n  useEffect(() => {\n    NotificationsEmitterModule.getLastNotificationResponseAsync?.().then((response) => {\n      // We only update the state with the resolved value if it's empty,\n      // because if it's not empty it must have been populated by the `useLayoutEffect`\n      // listener which returns \"live\" values.\n      setLastNotificationResponse((currentResponse) => currentResponse ?? response);\n    });\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AAG5D,SAASC,uCAAuC,QAAQ,wBAAwB;AAChF,OAAOC,0BAA0B,MAAM,8BAA8B;AAsCrE,eAAc,SAAUC,2BAA2BA,CAAA;EACjD,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGL,QAAQ,CAEtEM,SAAS,CAAC;EAGZP,eAAe,CAAC,MAAK;IACnB,MAAMQ,YAAY,GAAGN,uCAAuC,CAAEO,QAAQ,IAAI;MACxEH,2BAA2B,CAACG,QAAQ,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,MAAK;MACVD,YAAY,CAACE,MAAM,EAAE;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAKNX,SAAS,CAAC,MAAK;IACbI,0BAA0B,CAACQ,gCAAgC,GAAE,CAAE,CAACC,IAAI,CAAEH,QAAQ,IAAI;MAIhFH,2BAA2B,CAAEO,eAAe,IAAKA,eAAe,IAAIJ,QAAQ,CAAC;IAC/E,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOJ,wBAAwB;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}