{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eusou\\\\Desktop\\\\DVGC Mobile\\\\Front End\\\\src\\\\components\\\\ThemeContext.jsx\";\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n  const contextValue = {\n    isDarkMode,\n    toggleDarkMode\n  };\n  useEffect(() => {\n    StatusBar.setBarStyle(isDarkMode ? 'light-content' : 'dark-content');\n    StatusBar.setBackgroundColor(isDarkMode ? '#000000' : '#ffffff');\n  }, [isDarkMode]);\n  return _jsxDEV(ThemeContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","StatusBar","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","isDarkMode","setIsDarkMode","toggleDarkMode","prevMode","contextValue","setBarStyle","setBackgroundColor","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","useTheme","context","Error"],"sources":["C:/Users/eusou/Desktop/DVGC Mobile/Front End/src/components/ThemeContext.jsx"],"sourcesContent":["// Importe as bibliotecas necessÃ¡rias\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { StatusBar } from 'react-native';\r\n\r\n// Crie o contexto de tema\r\nconst ThemeContext = createContext();\r\n\r\n// Componente provedor de tema\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const contextValue = { isDarkMode, toggleDarkMode };\r\n\r\n  useEffect(() => {\r\n    // Configura a barra de status com base no tema\r\n    StatusBar.setBarStyle(isDarkMode ? 'light-content' : 'dark-content');\r\n    StatusBar.setBackgroundColor(isDarkMode ? '#000000' : '#ffffff');\r\n  }, [isDarkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={contextValue}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook para usar o tema\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAI9E,MAAMC,YAAY,GAAGP,aAAa,CAAC,CAAC;AAGpC,OAAO,MAAMQ,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3BD,aAAa,CAAEE,QAAQ,IAAK,CAACA,QAAQ,CAAC;EACxC,CAAC;EAED,MAAMC,YAAY,GAAG;IAAEJ,UAAU;IAAEE;EAAe,CAAC;EAEnDT,SAAS,CAAC,MAAM;IAEdC,SAAS,CAACW,WAAW,CAACL,UAAU,GAAG,eAAe,GAAG,cAAc,CAAC;IACpEN,SAAS,CAACY,kBAAkB,CAACN,UAAU,GAAG,SAAS,GAAG,SAAS,CAAC;EAClE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,OACEJ,OAAA,CAACC,YAAY,CAACU,QAAQ;IAACC,KAAK,EAAEJ,YAAa;IAAAL,QAAA,EACxCA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAGD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMC,OAAO,GAAGtB,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}