{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\eusou\\\\Desktop\\\\DVGC Mobile\\\\Front End\\\\src\\\\components\\\\ThemeContext.jsx\",\n  _this = this;\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ThemeContext = createContext();\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  var toggleDarkMode = function toggleDarkMode() {\n    setIsDarkMode(function (prevMode) {\n      return !prevMode;\n    });\n  };\n  var contextValue = {\n    isDarkMode: isDarkMode,\n    toggleDarkMode: toggleDarkMode\n  };\n  return _jsxDEV(ThemeContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, _this);\n};\nexport var useTheme = function useTheme() {\n  var context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","_ref","children","_useState","_useState2","_slicedToArray","isDarkMode","setIsDarkMode","toggleDarkMode","prevMode","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_this","useTheme","context","Error"],"sources":["C:/Users/eusou/Desktop/DVGC Mobile/Front End/src/components/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const contextValue = { isDarkMode, toggleDarkMode };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={contextValue}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,IAAMC,YAAY,GAAGL,aAAa,CAAC,CAAC;AAEpC,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtC,IAAAC,SAAA,GAAoCR,QAAQ,CAAC,IAAI,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhC,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3BD,aAAa,CAAC,UAACE,QAAQ;MAAA,OAAK,CAACA,QAAQ;IAAA,EAAC;EACxC,CAAC;EAED,IAAMC,YAAY,GAAG;IAAEJ,UAAU,EAAVA,UAAU;IAAEE,cAAc,EAAdA;EAAe,CAAC;EAEnD,OACEV,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAR,QAAA,EACxCA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACY,CAAC;AAE5B,CAAC;AAED,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;EAC5B,IAAMC,OAAO,GAAGvB,UAAU,CAACG,YAAY,CAAC;EACxC,IAAI,CAACoB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}