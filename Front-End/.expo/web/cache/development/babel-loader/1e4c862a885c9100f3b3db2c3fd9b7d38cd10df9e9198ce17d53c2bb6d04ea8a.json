{"ast":null,"code":"import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\nexport async function requestPermissionsAsync(permissions) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true\n    }\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\nexport const usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sources":["C:\\Users\\eusou\\Desktop\\DVGC Mobile\\Front End\\node_modules\\expo-notifications\\src\\NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\n/**\n * Calling this function checks current permissions settings related to notifications.\n * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n * There is no user-facing effect of calling this.\n * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function allowsNotificationsAsync() {\n *   const settings = await Notifications.getPermissionsAsync();\n *   return (\n *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n *   );\n * }\n * ```\n * @header permissions\n */\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\n/**\n * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n * setting badge count and playing sounds**.\n * @param permissions An object representing configuration for the request scope.\n * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export function requestPermissionsAsync() {\n *   return await Notifications.requestPermissionsAsync({\n *     ios: {\n *       allowAlert: true,\n *       allowBadge: true,\n *       allowSound: true,\n *       allowAnnouncements: true,\n *     },\n *   });\n * }\n * ```\n * @header permissions\n */\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Notifications.usePermissions();\n * ```\n * @header permission\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"],"mappings":"AAAA,SAASA,oBAAoB,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,mBAAmB;AAMvF,OAAOC,6BAA6B,MAAM,iCAAiC;AAqB3E,OAAO,eAAeC,mBAAmBA,CAAA;EACvC,IAAI,CAACD,6BAA6B,CAACC,mBAAmB,EAAE;IACtD,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;;EAGvE,OAAO,MAAMC,6BAA6B,CAACC,mBAAmB,EAAE;AAClE;AAyBA,OAAO,eAAeC,uBAAuBA,CAACC,WAA4C;EACxF,IAAI,CAACH,6BAA6B,CAACE,uBAAuB,EAAE;IAC1D,MAAM,IAAIH,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC;;EAG3E,MAAMK,oBAAoB,GAAGD,WAAW,IAAI;IAC1CE,GAAG,EAAE;MACHC,UAAU,EAAE,IAAI;MAChBC,UAAU,EAAE,IAAI;MAChBC,UAAU,EAAE;;GAEf;EACD,MAAMC,4BAA4B,GAAGL,oBAAoB,CAACN,QAAQ,CAACY,EAAE,CAAC;EACtE,OAAO,MAAMV,6BAA6B,CAACE,uBAAuB,CAACO,4BAA4B,CAAC;AAClG;AAYA,OAAO,MAAME,cAAc,GAAGd,oBAAoB,CAGhD;EACAe,aAAa,EAAEV,uBAAuB;EACtCW,SAAS,EAAEZ;CACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}